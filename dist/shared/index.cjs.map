{"version":3,"file":"index.cjs","sources":["../../src/shared/index.ts"],"sourcesContent":["// CJK is an acronym for Chinese, Japanese, and Korean.\n//\n// CJK includes the following Unicode blocks:\n// \\u2e80-\\u2eff CJK Radicals Supplement\n// \\u2f00-\\u2fdf Kangxi Radicals\n// \\u3040-\\u309f Hiragana\n// \\u30a0-\\u30ff Katakana\n// \\u3100-\\u312f Bopomofo\n// \\u3200-\\u32ff Enclosed CJK Letters and Months\n// \\u3400-\\u4dbf CJK Unified Ideographs Extension A\n// \\u4e00-\\u9fff CJK Unified Ideographs\n// \\uf900-\\ufaff CJK Compatibility Ideographs\n//\n// For more information about Unicode blocks, see\n// http://unicode-table.com/en/\n// https://github.com/vinta/pangu\n//\n// all J below does not include \\u30fb\nconst CJK = '\\u2e80-\\u2eff\\u2f00-\\u2fdf\\u3040-\\u309f\\u30a0-\\u30fa\\u30fc-\\u30ff\\u3100-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff';\n\n// ANS is short for Alphabets, Numbers, and Symbols.\n//\n// A includes A-Za-z\\u0370-\\u03ff\n// N includes 0-9\n// S includes `~!@#$%^&*()-_=+[]{}\\|;:'\",<.>/?\n//\n// some S below does not include all symbols\n\nconst ANY_CJK = new RegExp(`[${CJK}]`);\n\n// the symbol part only includes ~ ! ; : , . ? but . only matches one character\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = new RegExp(`([${CJK}])[ ]*([\\\\:]+|\\\\.)[ ]*([${CJK}])`, 'g');\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = new RegExp(`([${CJK}])[ ]*([~\\\\!;,\\\\?]+)[ ]*`, 'g');\nconst DOTS_CJK = new RegExp(`([\\\\.]{2,}|\\u2026)([${CJK}])`, 'g');\nconst FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\\\:([A-Z0-9\\\\(\\\\)])`, 'g');\n\n// the symbol part does not include '\nconst CJK_QUOTE = new RegExp(`([${CJK}])([\\`\"\\u05f4])`, 'g');\nconst QUOTE_CJK = new RegExp(`([\\`\"\\u05f4])([${CJK}])`, 'g');\nconst FIX_QUOTE_ANY_QUOTE = /([`\"\\u05f4]+)[ ]*(.+?)[ ]*([`\"\\u05f4]+)/g;\n\n// Handle curly quotes with alphanumeric characters\n// These patterns should only apply to curly quotes, not straight quotes\n// Straight quotes are already handled by CJK_QUOTE, QUOTE_CJK and FIX_QUOTE_ANY_QUOTE\nconst QUOTE_AN = /([\\u201d])([A-Za-z0-9])/g;  // Only closing curly quotes + AN\n\n// Special handling for straight quotes followed by alphanumeric after CJK\n// This catches patterns like: 社\"DF where the quote appears to be closing a quoted CJK phrase\nconst CJK_QUOTE_AN = new RegExp(`([${CJK}])(\")([A-Za-z0-9])`, 'g');\n\nconst CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');\nconst SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');\nconst FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([A-Za-z0-9${CJK}])( )('s)`, 'g');\n\nconst HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');\nconst CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');\nconst HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');\n\n// the symbol part only includes + - * / = & | < >\nconst CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([\\\\+\\\\-\\\\*\\\\/=&\\\\|<>])([A-Za-z0-9])`, 'g');\nconst ANS_OPERATOR_CJK = new RegExp(`([A-Za-z0-9])([\\\\+\\\\-\\\\*\\\\/=&\\\\|<>])([${CJK}])`, 'g');\n\nconst FIX_SLASH_AS = /([/]) ([a-z\\-_\\./]+)/g;\nconst FIX_SLASH_AS_SLASH = /([/\\.])([A-Za-z\\-_\\./]+) ([/])/g;\n\n// the bracket part only includes ( ) [ ] { } < > “ ”\nconst CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([\\\\(\\\\[\\\\{<>\\u201c])`, 'g');\nconst RIGHT_BRACKET_CJK = new RegExp(`([\\\\)\\\\]\\\\}<>\\u201d])([${CJK}])`, 'g');\nconst FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET = /([\\(\\[\\{<\\u201c]+)[ ]*(.+?)[ ]*([\\)\\]\\}>\\u201d]+)/;\nconst ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([A-Za-z0-9${CJK}])[ ]*([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])`, 'g');\nconst LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])[ ]*([A-Za-z0-9${CJK}])`, 'g');\n\nconst AN_LEFT_BRACKET = /([A-Za-z0-9])([\\(\\[\\{])/g;\nconst RIGHT_BRACKET_AN = /([\\)\\]\\}])([A-Za-z0-9])/g;\n\nconst CJK_ANS = new RegExp(`([${CJK}])([A-Za-z\\u0370-\\u03ff0-9@\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\\\|/\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])`, 'g');\nconst ANS_CJK = new RegExp(`([A-Za-z\\u0370-\\u03ff0-9~\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\\\|/!;:,\\\\.\\\\?\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])([${CJK}])`, 'g');\n\nconst S_A = /(%)([A-Za-z])/g;\n\nconst MIDDLE_DOT = /([ ]*)([\\u00b7\\u2022\\u2027])([ ]*)/g;\n\nexport class Pangu {\n  version: string;\n\n  constructor() {\n    this.version = '4.0.7';\n  }\n\n  convertToFullwidth(symbols: string): string {\n    return symbols\n      .replace(/~/g, '～')\n      .replace(/!/g, '！')\n      .replace(/;/g, '；')\n      .replace(/:/g, '：')\n      .replace(/,/g, '，')\n      .replace(/\\./g, '。')\n      .replace(/\\?/g, '？');\n  }\n\n  spacingSync(text: string): string {\n    if (typeof text !== 'string') {\n      console.warn(`spacing(text) only accepts string but got ${typeof text}`); // eslint-disable-line no-console\n      return text;\n    }\n\n    if (text.length <= 1 || !ANY_CJK.test(text)) {\n      return text;\n    }\n\n    const self = this;\n\n    // DEBUG\n    // String.prototype.rawReplace = String.prototype.replace;\n    // String.prototype.replace = function(regexp, newSubstr) {\n    //   const oldText = this;\n    //   const newText = this.rawReplace(regexp, newSubstr);\n    //   if (oldText !== newText) {\n    //     console.log(`regexp: ${regexp}`);\n    //     console.log(`oldText: ${oldText}`);\n    //     console.log(`newText: ${newText}`);\n    //   }\n    //   return newText;\n    // };\n\n    let newText = text;\n\n    // https://stackoverflow.com/questions/4285472/multiple-regex-replace\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK, (_match, leftCjk, symbols, rightCjk) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${leftCjk}${fullwidthSymbols}${rightCjk}`;\n    });\n\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS, (_match, cjk, symbols) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${cjk}${fullwidthSymbols}`;\n    });\n\n    newText = newText.replace(DOTS_CJK, '$1 $2');\n    newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');\n\n    newText = newText.replace(CJK_QUOTE, '$1 $2');\n    newText = newText.replace(QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');\n    \n    // Handle quotes with alphanumeric - closing quotes followed by AN need space\n    newText = newText.replace(QUOTE_AN, '$1 $2');\n    // Opening quotes preceded by AN don't need space (they're handled by other patterns)\n    \n    // Handle CJK followed by closing quote followed by alphanumeric\n    newText = newText.replace(CJK_QUOTE_AN, '$1$2 $3');\n\n    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');\n    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, \"$1's\"); // eslint-disable-line quotes\n\n    newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n    newText = newText.replace(CJK_HASH, '$1 $2');\n    newText = newText.replace(HASH_CJK, '$1 $3');\n\n    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');\n\n    newText = newText.replace(FIX_SLASH_AS, '$1$2');\n    newText = newText.replace(FIX_SLASH_AS_SLASH, '$1$2$3');\n\n    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');\n    newText = newText.replace(FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1$2$3');\n    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');\n    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');\n\n    newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');\n\n    newText = newText.replace(CJK_ANS, '$1 $2');\n    newText = newText.replace(ANS_CJK, '$1 $2');\n\n    newText = newText.replace(S_A, '$1 $2');\n\n    newText = newText.replace(MIDDLE_DOT, '・');\n\n    // DEBUG\n    // String.prototype.replace = String.prototype.rawReplace;\n\n    return newText;\n  }\n\n  spacing(text: string): Promise<string>;\n  spacing(text: string, callback: (err: any, result?: string) => void): void;\n  spacing(text: string, callback?: (err: any, result?: string) => void): Promise<string> | void {\n    if (callback) {\n      // Callback mode\n      let newText;\n      try {\n        newText = this.spacingSync(text);\n      } catch (err) {\n        callback(err);\n        return;\n      }\n      callback(null, newText);\n    } else {\n      // Promise mode\n      return new Promise((resolve, reject) => {\n        try {\n          const newText = this.spacingSync(text);\n          resolve(newText);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }\n\n  // Deprecated: Use spacing() instead\n  spacingText(text: string): Promise<string>;\n  spacingText(text: string, callback: (err: any, result?: string) => void): void;\n  spacingText(text: string, callback?: (err: any, result?: string) => void): Promise<string> | void {\n    return this.spacing(text, callback as any);\n  }\n\n  spacingTextSync(text: string): string {\n    return this.spacingSync(text);\n  }\n}\n\n// Create default instance\nexport const pangu = new Pangu();\n\n// Default export\nexport default pangu;\n"],"names":["CJK","ANY_CJK","CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK","CONVERT_TO_FULLWIDTH_CJK_SYMBOLS","DOTS_CJK","FIX_CJK_COLON_ANS","CJK_QUOTE","QUOTE_CJK","FIX_QUOTE_ANY_QUOTE","QUOTE_AN","CJK_QUOTE_AN","CJK_SINGLE_QUOTE_BUT_POSSESSIVE","SINGLE_QUOTE_CJK","FIX_POSSESSIVE_SINGLE_QUOTE","HASH_ANS_CJK_HASH","CJK_HASH","HASH_CJK","CJK_OPERATOR_ANS","ANS_OPERATOR_CJK","FIX_SLASH_AS","FIX_SLASH_AS_SLASH","CJK_LEFT_BRACKET","RIGHT_BRACKET_CJK","FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET","ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET","LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK","AN_LEFT_BRACKET","RIGHT_BRACKET_AN","CJK_ANS","ANS_CJK","S_A","MIDDLE_DOT","Pangu","symbols","text","self","newText","_match","leftCjk","rightCjk","fullwidthSymbols","cjk","callback","err","resolve","reject","pangu"],"mappings":"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"}