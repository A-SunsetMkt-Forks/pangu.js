{"version":3,"file":"index.js","sources":["../../src/shared/index.ts"],"sourcesContent":["// CJK is an acronym for Chinese, Japanese, and Korean.\n//\n// CJK includes the following Unicode blocks:\n// \\u2e80-\\u2eff CJK Radicals Supplement\n// \\u2f00-\\u2fdf Kangxi Radicals\n// \\u3040-\\u309f Hiragana\n// \\u30a0-\\u30ff Katakana\n// \\u3100-\\u312f Bopomofo\n// \\u3200-\\u32ff Enclosed CJK Letters and Months\n// \\u3400-\\u4dbf CJK Unified Ideographs Extension A\n// \\u4e00-\\u9fff CJK Unified Ideographs\n// \\uf900-\\ufaff CJK Compatibility Ideographs\n//\n// For more information about Unicode blocks, see\n// http://unicode-table.com/en/\n// https://github.com/vinta/pangu\n//\n// all J below does not include \\u30fb\nconst CJK = '\\u2e80-\\u2eff\\u2f00-\\u2fdf\\u3040-\\u309f\\u30a0-\\u30fa\\u30fc-\\u30ff\\u3100-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff';\n\n// ANS is short for Alphabets, Numbers, and Symbols.\n//\n// A includes A-Za-z\\u0370-\\u03ff\n// N includes 0-9\n// S includes `~!@#$%^&*()-_=+[]{}\\|;:'\",<.>/?\n//\n// some S below does not include all symbols\n\nconst ANY_CJK = new RegExp(`[${CJK}]`);\n\n// the symbol part only includes ~ ! ; : , . ? but . only matches one character\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = new RegExp(`([${CJK}])[ ]*([\\\\:]+|\\\\.)[ ]*([${CJK}])`, 'g');\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = new RegExp(`([${CJK}])[ ]*([~\\\\!;,\\\\?]+)[ ]*`, 'g');\nconst DOTS_CJK = new RegExp(`([\\\\.]{2,}|\\u2026)([${CJK}])`, 'g');\nconst FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\\\:([A-Z0-9\\\\(\\\\)])`, 'g');\n\n// the symbol part does not include '\nconst CJK_QUOTE = new RegExp(`([${CJK}])([\\`\"\\u05f4])`, 'g');\nconst QUOTE_CJK = new RegExp(`([\\`\"\\u05f4])([${CJK}])`, 'g');\nconst FIX_QUOTE_ANY_QUOTE = /([`\"\\u05f4]+)[ ]*(.+?)[ ]*([`\"\\u05f4]+)/g;\n\n// Handle curly quotes with alphanumeric characters\n// These patterns should only apply to curly quotes, not straight quotes\n// Straight quotes are already handled by CJK_QUOTE, QUOTE_CJK and FIX_QUOTE_ANY_QUOTE\nconst QUOTE_AN = /([\\u201d])([A-Za-z0-9])/g;  // Only closing curly quotes + AN\n\n// Special handling for straight quotes followed by alphanumeric after CJK\n// This catches patterns like: 社\"DF where the quote appears to be closing a quoted CJK phrase\nconst CJK_QUOTE_AN = new RegExp(`([${CJK}])(\")([A-Za-z0-9])`, 'g');\n\nconst CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');\nconst SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');\nconst FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([A-Za-z0-9${CJK}])( )('s)`, 'g');\n\nconst HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');\nconst CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');\nconst HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');\n\n// the symbol part only includes + - * / = & | < >\nconst CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([\\\\+\\\\-\\\\*\\\\/=&\\\\|<>])([A-Za-z0-9])`, 'g');\nconst ANS_OPERATOR_CJK = new RegExp(`([A-Za-z0-9])([\\\\+\\\\-\\\\*\\\\/=&\\\\|<>])([${CJK}])`, 'g');\n\nconst FIX_SLASH_AS = /([/]) ([a-z\\-_\\./]+)/g;\nconst FIX_SLASH_AS_SLASH = /([/\\.])([A-Za-z\\-_\\./]+) ([/])/g;\n\n// the bracket part only includes ( ) [ ] { } < > “ ”\nconst CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([\\\\(\\\\[\\\\{<>\\u201c])`, 'g');\nconst RIGHT_BRACKET_CJK = new RegExp(`([\\\\)\\\\]\\\\}<>\\u201d])([${CJK}])`, 'g');\nconst FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET = /([\\(\\[\\{<\\u201c]+)[ ]*(.+?)[ ]*([\\)\\]\\}>\\u201d]+)/;\nconst ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([A-Za-z0-9${CJK}])[ ]*([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])`, 'g');\nconst LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])[ ]*([A-Za-z0-9${CJK}])`, 'g');\n\nconst AN_LEFT_BRACKET = /([A-Za-z0-9])([\\(\\[\\{])/g;\nconst RIGHT_BRACKET_AN = /([\\)\\]\\}])([A-Za-z0-9])/g;\n\nconst CJK_ANS = new RegExp(`([${CJK}])([A-Za-z\\u0370-\\u03ff0-9@\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\\\|/\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])`, 'g');\nconst ANS_CJK = new RegExp(`([A-Za-z\\u0370-\\u03ff0-9~\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\\\|/!;:,\\\\.\\\\?\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])([${CJK}])`, 'g');\n\nconst S_A = /(%)([A-Za-z])/g;\n\nconst MIDDLE_DOT = /([ ]*)([\\u00b7\\u2022\\u2027])([ ]*)/g;\n\nexport class Pangu {\n  version: string;\n\n  constructor() {\n    this.version = '4.0.7';\n  }\n\n  convertToFullwidth(symbols: string): string {\n    return symbols\n      .replace(/~/g, '～')\n      .replace(/!/g, '！')\n      .replace(/;/g, '；')\n      .replace(/:/g, '：')\n      .replace(/,/g, '，')\n      .replace(/\\./g, '。')\n      .replace(/\\?/g, '？');\n  }\n\n  spacingSync(text: string): string {\n    if (typeof text !== 'string') {\n      console.warn(`spacing(text) only accepts string but got ${typeof text}`); // eslint-disable-line no-console\n      return text;\n    }\n\n    if (text.length <= 1 || !ANY_CJK.test(text)) {\n      return text;\n    }\n\n    const self = this;\n\n    // DEBUG\n    // String.prototype.rawReplace = String.prototype.replace;\n    // String.prototype.replace = function(regexp, newSubstr) {\n    //   const oldText = this;\n    //   const newText = this.rawReplace(regexp, newSubstr);\n    //   if (oldText !== newText) {\n    //     console.log(`regexp: ${regexp}`);\n    //     console.log(`oldText: ${oldText}`);\n    //     console.log(`newText: ${newText}`);\n    //   }\n    //   return newText;\n    // };\n\n    let newText = text;\n\n    // https://stackoverflow.com/questions/4285472/multiple-regex-replace\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK, (_match, leftCjk, symbols, rightCjk) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${leftCjk}${fullwidthSymbols}${rightCjk}`;\n    });\n\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS, (_match, cjk, symbols) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${cjk}${fullwidthSymbols}`;\n    });\n\n    newText = newText.replace(DOTS_CJK, '$1 $2');\n    newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');\n\n    newText = newText.replace(CJK_QUOTE, '$1 $2');\n    newText = newText.replace(QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');\n    \n    // Handle quotes with alphanumeric - closing quotes followed by AN need space\n    newText = newText.replace(QUOTE_AN, '$1 $2');\n    // Opening quotes preceded by AN don't need space (they're handled by other patterns)\n    \n    // Handle CJK followed by closing quote followed by alphanumeric\n    newText = newText.replace(CJK_QUOTE_AN, '$1$2 $3');\n\n    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');\n    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, \"$1's\"); // eslint-disable-line quotes\n\n    newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n    newText = newText.replace(CJK_HASH, '$1 $2');\n    newText = newText.replace(HASH_CJK, '$1 $3');\n\n    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');\n\n    newText = newText.replace(FIX_SLASH_AS, '$1$2');\n    newText = newText.replace(FIX_SLASH_AS_SLASH, '$1$2$3');\n\n    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');\n    newText = newText.replace(FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1$2$3');\n    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');\n    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');\n\n    newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');\n\n    newText = newText.replace(CJK_ANS, '$1 $2');\n    newText = newText.replace(ANS_CJK, '$1 $2');\n\n    newText = newText.replace(S_A, '$1 $2');\n\n    newText = newText.replace(MIDDLE_DOT, '・');\n\n    // DEBUG\n    // String.prototype.replace = String.prototype.rawReplace;\n\n    return newText;\n  }\n\n  spacing(text: string): Promise<string>;\n  spacing(text: string, callback: (err: any, result?: string) => void): void;\n  spacing(text: string, callback?: (err: any, result?: string) => void): Promise<string> | void {\n    if (callback) {\n      // Callback mode\n      let newText;\n      try {\n        newText = this.spacingSync(text);\n      } catch (err) {\n        callback(err);\n        return;\n      }\n      callback(null, newText);\n    } else {\n      // Promise mode\n      return new Promise((resolve, reject) => {\n        try {\n          const newText = this.spacingSync(text);\n          resolve(newText);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }\n\n  // Deprecated: Use spacing() instead\n  spacingText(text: string): Promise<string>;\n  spacingText(text: string, callback: (err: any, result?: string) => void): void;\n  spacingText(text: string, callback?: (err: any, result?: string) => void): Promise<string> | void {\n    return this.spacing(text, callback as any);\n  }\n\n  spacingTextSync(text: string): string {\n    return this.spacingSync(text);\n  }\n}\n\n// Create default instance\nexport const pangu = new Pangu();\n\n// Default export\nexport default pangu;\n"],"names":["CJK","ANY_CJK","CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK","CONVERT_TO_FULLWIDTH_CJK_SYMBOLS","DOTS_CJK","FIX_CJK_COLON_ANS","CJK_QUOTE","QUOTE_CJK","FIX_QUOTE_ANY_QUOTE","QUOTE_AN","CJK_QUOTE_AN","CJK_SINGLE_QUOTE_BUT_POSSESSIVE","SINGLE_QUOTE_CJK","FIX_POSSESSIVE_SINGLE_QUOTE","HASH_ANS_CJK_HASH","CJK_HASH","HASH_CJK","CJK_OPERATOR_ANS","ANS_OPERATOR_CJK","FIX_SLASH_AS","FIX_SLASH_AS_SLASH","CJK_LEFT_BRACKET","RIGHT_BRACKET_CJK","FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET","ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET","LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK","AN_LEFT_BRACKET","RIGHT_BRACKET_AN","CJK_ANS","ANS_CJK","S_A","MIDDLE_DOT","Pangu","symbols","text","self","newText","_match","leftCjk","rightCjk","fullwidthSymbols","cjk","callback","err","resolve","reject","pangu"],"mappings":"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"}