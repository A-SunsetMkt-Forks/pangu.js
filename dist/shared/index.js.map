{"version":3,"file":"index.js","sources":["../../src/shared/index.ts"],"sourcesContent":["// CJK is an acronym for Chinese, Japanese, and Korean.\n//\n// CJK includes the following Unicode blocks:\n// \\u2e80-\\u2eff CJK Radicals Supplement\n// \\u2f00-\\u2fdf Kangxi Radicals\n// \\u3040-\\u309f Hiragana\n// \\u30a0-\\u30ff Katakana\n// \\u3100-\\u312f Bopomofo\n// \\u3200-\\u32ff Enclosed CJK Letters and Months\n// \\u3400-\\u4dbf CJK Unified Ideographs Extension A\n// \\u4e00-\\u9fff CJK Unified Ideographs\n// \\uf900-\\ufaff CJK Compatibility Ideographs\n//\n// For more information about Unicode blocks, see\n// http://unicode-table.com/en/\n// https://github.com/vinta/pangu\n//\n// all J below does not include \\u30fb\nconst CJK = '\\u2e80-\\u2eff\\u2f00-\\u2fdf\\u3040-\\u309f\\u30a0-\\u30fa\\u30fc-\\u30ff\\u3100-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff';\n\n// Define filesystem path pattern that can be reused\n// Matches Unix paths like /home, /usr/bin, /etc/nginx.conf\n// Also matches Windows paths like C:/ D:/\n// Only matches paths that clearly start with known system directories, hidden files, or common development directories\nconst FILESYSTEM_PATH = /(?:[A-Z]:)?\\/(?:\\.?(?:home|root|usr|etc|var|opt|tmp|dev|mnt|proc|sys|bin|boot|lib|media|run|sbin|srv|node_modules|path)|\\.(?:[A-Za-z0-9_\\-]+))(?:\\/[A-Za-z0-9_\\-\\.@\\+]+)*/;\n\n// ANS is short for Alphabets, Numbers, and Symbols.\n//\n// A includes A-Za-z\\u0370-\\u03ff\n// N includes 0-9\n// S includes `~!@#$%^&*()-_=+[]{}\\|;:'\",<.>/?\n//\n// some S below does not include all symbols\n\nconst ANY_CJK = new RegExp(`[${CJK}]`);\n\n// the symbol part only includes ~ ! ; : , . ? but . only matches one character\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = new RegExp(`([${CJK}])[ ]*([\\\\:]+|\\\\.)[ ]*([${CJK}])`, 'g');\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = new RegExp(`([${CJK}])[ ]*([~\\\\!;,\\\\?]+)[ ]*`, 'g');\nconst DOTS_CJK = new RegExp(`([\\\\.]{2,}|\\u2026)([${CJK}])`, 'g');\nconst FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\\\:([A-Z0-9\\\\(\\\\)])`, 'g');\n\n// the symbol part does not include '\nconst CJK_QUOTE = new RegExp(`([${CJK}])([\\`\"\\u05f4])`, 'g');\nconst QUOTE_CJK = new RegExp(`([\\`\"\\u05f4])([${CJK}])`, 'g');\nconst FIX_QUOTE_ANY_QUOTE = /([`\"\\u05f4]+)[ ]*(.+?)[ ]*([`\"\\u05f4]+)/g;\n\n// Handle curly quotes with alphanumeric characters\n// These patterns should only apply to curly quotes, not straight quotes\n// Straight quotes are already handled by CJK_QUOTE, QUOTE_CJK and FIX_QUOTE_ANY_QUOTE\nconst QUOTE_AN = /([\\u201d])([A-Za-z0-9])/g; // Only closing curly quotes + AN\n\n// Special handling for straight quotes followed by alphanumeric after CJK\n// This catches patterns like: 社\"DF where the quote appears to be closing a quoted CJK phrase\nconst CJK_QUOTE_AN = new RegExp(`([${CJK}])(\")([A-Za-z0-9])`, 'g');\n\nconst CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');\nconst SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');\nconst FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([A-Za-z0-9${CJK}])( )('s)`, 'g');\n\nconst HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');\nconst CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');\nconst HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');\n\n// the symbol part only includes + - * = & < > (excluding | and /)\nconst CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([\\\\+\\\\-\\\\*=&<>])([A-Za-z0-9])`, 'g');\nconst ANS_OPERATOR_CJK = new RegExp(`([A-Za-z0-9])([\\\\+\\\\-\\\\*=&<>])([${CJK}])`, 'g');\n\n// Only add spaces around / when both sides are CJK\nconst CJK_SLASH_CJK = new RegExp(`([${CJK}])([/])([${CJK}])`, 'g');\n\n// the bracket part only includes ( ) [ ] { } < > “ ”\nconst CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([\\\\(\\\\[\\\\{<>\\u201c])`, 'g');\nconst RIGHT_BRACKET_CJK = new RegExp(`([\\\\)\\\\]\\\\}<>\\u201d])([${CJK}])`, 'g');\nconst FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET = /([\\(\\[\\{<\\u201c]+)[ ]*(.+?)[ ]*([\\)\\]\\}>\\u201d]+)/;\nconst ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([A-Za-z0-9${CJK}])[ ]*([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])`, 'g');\nconst LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])[ ]*([A-Za-z0-9${CJK}])`, 'g');\n\nconst AN_LEFT_BRACKET = /([A-Za-z0-9])(?<!\\.[A-Za-z0-9]*)([\\(\\[\\{])/g;\nconst RIGHT_BRACKET_AN = /([\\)\\]\\}])([A-Za-z0-9])/g;\n\n// Special pattern for filesystem paths like /home, /root, /dev/random after CJK\nconst CJK_FILESYSTEM_PATH = new RegExp(`([${CJK}])(${FILESYSTEM_PATH.source})`, 'g');\n\n// Pattern for filesystem path ending with / followed by CJK\nconst FILESYSTEM_PATH_SLASH_CJK = new RegExp(`(${FILESYSTEM_PATH.source}/)([${CJK}])`, 'g');\n\nconst CJK_ANS = new RegExp(`([${CJK}])([A-Za-z\\u0370-\\u03ff0-9@\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])`, 'g');\nconst ANS_CJK = new RegExp(`([A-Za-z\\u0370-\\u03ff0-9~\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=!;:,\\\\.\\\\?\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])([${CJK}])`, 'g');\n\nconst S_A = /(%)([A-Za-z])/g;\n\nconst MIDDLE_DOT = /([ ]*)([\\u00b7\\u2022\\u2027])([ ]*)/g;\n\nexport class Pangu {\n  version: string;\n\n  constructor() {\n    this.version = '5.2.0';\n  }\n\n  public spacingText(text: string) {\n    if (typeof text !== 'string') {\n      console.warn(`spacingText(text) only accepts string but got ${typeof text}`);\n      return text;\n    }\n\n    if (text.length <= 1 || !ANY_CJK.test(text)) {\n      return text;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    // DEBUG\n    // String.prototype.rawReplace = String.prototype.replace;\n    // String.prototype.replace = function(regexp, newSubstr) {\n    //   const oldText = this;\n    //   const newText = this.rawReplace(regexp, newSubstr);\n    //   if (oldText !== newText) {\n    //     console.log(`regexp: ${regexp}`);\n    //     console.log(`oldText: ${oldText}`);\n    //     console.log(`newText: ${newText}`);\n    //   }\n    //   return newText;\n    // };\n\n    let newText = text;\n\n    // Protect HTML tags from being processed\n    const htmlTags: string[] = [];\n    const HTML_TAG_PLACEHOLDER = '\\u0000HTML_TAG_PLACEHOLDER_';\n\n    // More specific HTML tag pattern:\n    // - Opening tags: <tagname ...> or <tagname>\n    // - Closing tags: </tagname>\n    // - Self-closing tags: <tagname ... />\n    // This pattern ensures we only match actual HTML tags, not just any < > content\n    const HTML_TAG_PATTERN = /<\\/?[a-zA-Z][a-zA-Z0-9]*(?:\\s+[^>]*)?>/g;\n\n    // Replace all HTML tags with placeholders, but process attribute values\n    newText = newText.replace(HTML_TAG_PATTERN, (match) => {\n      // Process attribute values inside the tag\n      const processedTag = match.replace(/(\\w+)=\"([^\"]*)\"/g, (_attrMatch, attrName, attrValue) => {\n        // Process the attribute value with spacing\n        const processedValue = self.spacingText(attrValue);\n        return `${attrName}=\"${processedValue}\"`;\n      });\n\n      const index = htmlTags.length;\n      htmlTags.push(processedTag);\n      return `${HTML_TAG_PLACEHOLDER}${index}\\u0000`;\n    });\n\n    // https://stackoverflow.com/questions/4285472/multiple-regex-replace\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK, (_match, leftCjk, symbols, rightCjk) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${leftCjk}${fullwidthSymbols}${rightCjk}`;\n    });\n\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS, (_match, cjk, symbols) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${cjk}${fullwidthSymbols}`;\n    });\n\n    newText = newText.replace(DOTS_CJK, '$1 $2');\n    newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');\n\n    newText = newText.replace(CJK_QUOTE, '$1 $2');\n    newText = newText.replace(QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');\n\n    // Handle quotes with alphanumeric - closing quotes followed by AN need space\n    newText = newText.replace(QUOTE_AN, '$1 $2');\n    // Opening quotes preceded by AN don't need space (they're handled by other patterns)\n\n    // Handle CJK followed by closing quote followed by alphanumeric\n    newText = newText.replace(CJK_QUOTE_AN, '$1$2 $3');\n\n    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');\n    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, \"$1's\");\n\n    newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n    newText = newText.replace(CJK_HASH, '$1 $2');\n    newText = newText.replace(HASH_CJK, '$1 $3');\n\n    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');\n\n    // Add space before filesystem paths after CJK (e.g., \"和/root\" -> \"和 /root\")\n    newText = newText.replace(CJK_FILESYSTEM_PATH, '$1 $2');\n\n    // Add space after filesystem paths ending with / before CJK (e.g., \"/home/與\" -> \"/home/ 與\")\n    newText = newText.replace(FILESYSTEM_PATH_SLASH_CJK, '$1 $2');\n\n    // Only add spaces around / when both sides are CJK\n    newText = newText.replace(CJK_SLASH_CJK, '$1 $2 $3');\n\n    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');\n    newText = newText.replace(FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1$2$3');\n    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');\n    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');\n\n    newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');\n\n    newText = newText.replace(CJK_ANS, '$1 $2');\n    newText = newText.replace(ANS_CJK, '$1 $2');\n\n    newText = newText.replace(S_A, '$1 $2');\n\n    newText = newText.replace(MIDDLE_DOT, '・');\n\n    // Restore HTML tags from placeholders\n    const HTML_TAG_RESTORE = new RegExp(`${HTML_TAG_PLACEHOLDER}(\\\\d+)\\u0000`, 'g');\n    newText = newText.replace(HTML_TAG_RESTORE, (_match, index) => {\n      return htmlTags[parseInt(index, 10)] || '';\n    });\n\n    // DEBUG\n    // String.prototype.replace = String.prototype.rawReplace;\n\n    return newText;\n  }\n\n  // alias for spacingText()\n  public spacing(text: string) {\n    return this.spacingText(text);\n  }\n\n  public hasPerfectSpacing(text: string) {\n    return this.spacingText(text) === text;\n  }\n\n  protected convertToFullwidth(symbols: string): string {\n    // prettier-ignore\n    return symbols\n      .replace(/~/g, '～')\n      .replace(/!/g, '！')\n      .replace(/;/g, '；')\n      .replace(/:/g, '：')\n      .replace(/,/g, '，')\n      .replace(/\\./g, '。')\n      .replace(/\\?/g, '？');\n  }\n}\n\nexport const pangu = new Pangu();\n\nexport { ANY_CJK };\n\nexport default pangu;\n"],"names":[],"mappings":";;;AAkBA,MAAM,MAAM;AAMZ,MAAM,kBAAkB;AAUxB,MAAM,UAAU,IAAI,OAAO,IAAI,GAAG,GAAG;AAGrC,MAAM,uCAAuC,IAAI,OAAO,KAAK,GAAG,2BAA2B,GAAG,MAAM,GAAG;AACvG,MAAM,mCAAmC,IAAI,OAAO,KAAK,GAAG,4BAA4B,GAAG;AAC3F,MAAM,WAAW,IAAI,OAAO,uBAAuB,GAAG,MAAM,GAAG;AAC/D,MAAM,oBAAoB,IAAI,OAAO,KAAK,GAAG,yBAAyB,GAAG;AAGzE,MAAM,YAAY,IAAI,OAAO,KAAK,GAAG,mBAAmB,GAAG;AAC3D,MAAM,YAAY,IAAI,OAAO,kBAAkB,GAAG,MAAM,GAAG;AAC3D,MAAM,sBAAsB;AAK5B,MAAM,WAAW;AAIjB,MAAM,eAAe,IAAI,OAAO,KAAK,GAAG,sBAAsB,GAAG;AAEjE,MAAM,kCAAkC,IAAI,OAAO,KAAK,GAAG,aAAa,GAAG;AAC3E,MAAM,mBAAmB,IAAI,OAAO,QAAQ,GAAG,MAAM,GAAG;AACxD,MAAM,8BAA8B,IAAI,OAAO,cAAc,GAAG,aAAa,GAAG;AAEhF,MAAM,oBAAoB,IAAI,OAAO,KAAK,GAAG,UAAU,GAAG,WAAW,GAAG,MAAM,GAAG;AACjF,MAAM,WAAW,IAAI,OAAO,KAAK,GAAG,eAAe,GAAG;AACtD,MAAM,WAAW,IAAI,OAAO,cAAc,GAAG,MAAM,GAAG;AAGtD,MAAM,mBAAmB,IAAI,OAAO,KAAK,GAAG,oCAAoC,GAAG;AACnF,MAAM,mBAAmB,IAAI,OAAO,mCAAmC,GAAG,MAAM,GAAG;AAGnF,MAAM,gBAAgB,IAAI,OAAO,KAAK,GAAG,YAAY,GAAG,MAAM,GAAG;AAGjE,MAAM,mBAAmB,IAAI,OAAO,KAAK,GAAG,2BAA2B,GAAG;AAC1E,MAAM,oBAAoB,IAAI,OAAO,0BAA0B,GAAG,MAAM,GAAG;AAC3E,MAAM,qCAAqC;AAC3C,MAAM,yCAAyC,IAAI,OAAO,cAAc,GAAG,8BAA8B,GAAG,sBAAsB,GAAG;AACrI,MAAM,yCAAyC,IAAI,OAAO,wBAAwB,GAAG,oCAAoC,GAAG,MAAM,GAAG;AAErI,MAAM,kBAAkB,WAAA,kDAAA,GAAA;AACxB,MAAM,mBAAmB;AAGzB,MAAM,sBAAsB,IAAI,OAAO,KAAK,GAAG,MAAM,gBAAgB,MAAM,KAAK,GAAG;AAGnF,MAAM,4BAA4B,IAAI,OAAO,IAAI,gBAAgB,MAAM,OAAO,GAAG,MAAM,GAAG;AAE1F,MAAM,UAAU,IAAI,OAAO,KAAK,GAAG,+FAA8F,GAAG;AACpI,MAAM,UAAU,IAAI,OAAO,wGAAuG,GAAG,MAAM,GAAG;AAE9I,MAAM,MAAM;AAEZ,MAAM,aAAa;AAEZ,MAAM,MAAM;AAAA,EAGjB,cAAc;AAFd;AAGE,SAAK,UAAU;AAAA,EAAA;AAAA,EAGV,YAAY,MAAc;AAC3B,QAAA,OAAO,SAAS,UAAU;AAC5B,cAAQ,KAAK,iDAAiD,OAAO,IAAI,EAAE;AACpE,aAAA;AAAA,IAAA;AAGT,QAAI,KAAK,UAAU,KAAK,CAAC,QAAQ,KAAK,IAAI,GAAG;AACpC,aAAA;AAAA,IAAA;AAIT,UAAM,OAAO;AAeb,QAAI,UAAU;AAGd,UAAM,WAAqB,CAAC;AAC5B,UAAM,uBAAuB;AAO7B,UAAM,mBAAmB;AAGzB,cAAU,QAAQ,QAAQ,kBAAkB,CAAC,UAAU;AAErD,YAAM,eAAe,MAAM,QAAQ,oBAAoB,CAAC,YAAY,UAAU,cAAc;AAEpF,cAAA,iBAAiB,KAAK,YAAY,SAAS;AAC1C,eAAA,GAAG,QAAQ,KAAK,cAAc;AAAA,MAAA,CACtC;AAED,YAAM,QAAQ,SAAS;AACvB,eAAS,KAAK,YAAY;AACnB,aAAA,GAAG,oBAAoB,GAAG,KAAK;AAAA,IAAA,CACvC;AAGD,cAAU,QAAQ,QAAQ,sCAAsC,CAAC,QAAQ,SAAS,SAAS,aAAa;AAChG,YAAA,mBAAmB,KAAK,mBAAmB,OAAO;AACxD,aAAO,GAAG,OAAO,GAAG,gBAAgB,GAAG,QAAQ;AAAA,IAAA,CAChD;AAED,cAAU,QAAQ,QAAQ,kCAAkC,CAAC,QAAQ,KAAK,YAAY;AAC9E,YAAA,mBAAmB,KAAK,mBAAmB,OAAO;AACjD,aAAA,GAAG,GAAG,GAAG,gBAAgB;AAAA,IAAA,CACjC;AAES,cAAA,QAAQ,QAAQ,UAAU,OAAO;AACjC,cAAA,QAAQ,QAAQ,mBAAmB,YAAO;AAE1C,cAAA,QAAQ,QAAQ,WAAW,OAAO;AAClC,cAAA,QAAQ,QAAQ,WAAW,OAAO;AAClC,cAAA,QAAQ,QAAQ,qBAAqB,QAAQ;AAG7C,cAAA,QAAQ,QAAQ,UAAU,OAAO;AAIjC,cAAA,QAAQ,QAAQ,cAAc,SAAS;AAEvC,cAAA,QAAQ,QAAQ,iCAAiC,OAAO;AACxD,cAAA,QAAQ,QAAQ,kBAAkB,OAAO;AACzC,cAAA,QAAQ,QAAQ,6BAA6B,MAAM;AAEnD,cAAA,QAAQ,QAAQ,mBAAmB,cAAc;AACjD,cAAA,QAAQ,QAAQ,UAAU,OAAO;AACjC,cAAA,QAAQ,QAAQ,UAAU,OAAO;AAEjC,cAAA,QAAQ,QAAQ,kBAAkB,UAAU;AAC5C,cAAA,QAAQ,QAAQ,kBAAkB,UAAU;AAG5C,cAAA,QAAQ,QAAQ,qBAAqB,OAAO;AAG5C,cAAA,QAAQ,QAAQ,2BAA2B,OAAO;AAGlD,cAAA,QAAQ,QAAQ,eAAe,UAAU;AAEzC,cAAA,QAAQ,QAAQ,kBAAkB,OAAO;AACzC,cAAA,QAAQ,QAAQ,mBAAmB,OAAO;AAC1C,cAAA,QAAQ,QAAQ,oCAAoC,QAAQ;AAC5D,cAAA,QAAQ,QAAQ,wCAAwC,WAAW;AACnE,cAAA,QAAQ,QAAQ,wCAAwC,WAAW;AAEnE,cAAA,QAAQ,QAAQ,iBAAiB,OAAO;AACxC,cAAA,QAAQ,QAAQ,kBAAkB,OAAO;AAEzC,cAAA,QAAQ,QAAQ,SAAS,OAAO;AAChC,cAAA,QAAQ,QAAQ,SAAS,OAAO;AAEhC,cAAA,QAAQ,QAAQ,KAAK,OAAO;AAE5B,cAAA,QAAQ,QAAQ,YAAY,QAAG;AAGzC,UAAM,mBAAmB,IAAI,OAAO,GAAG,oBAAoB,YAAgB,GAAG;AAC9E,cAAU,QAAQ,QAAQ,kBAAkB,CAAC,QAAQ,UAAU;AAC7D,aAAO,SAAS,SAAS,OAAO,EAAE,CAAC,KAAK;AAAA,IAAA,CACzC;AAKM,WAAA;AAAA,EAAA;AAAA;AAAA,EAIF,QAAQ,MAAc;AACpB,WAAA,KAAK,YAAY,IAAI;AAAA,EAAA;AAAA,EAGvB,kBAAkB,MAAc;AAC9B,WAAA,KAAK,YAAY,IAAI,MAAM;AAAA,EAAA;AAAA,EAG1B,mBAAmB,SAAyB;AAE7C,WAAA,QACJ,QAAQ,MAAM,QAAG,EACjB,QAAQ,MAAM,QAAG,EACjB,QAAQ,MAAM,QAAG,EACjB,QAAQ,MAAM,QAAG,EACjB,QAAQ,MAAM,QAAG,EACjB,QAAQ,OAAO,QAAG,EAClB,QAAQ,OAAO,QAAG;AAAA,EAAA;AAEzB;AAEa,MAAA,QAAQ,IAAI,MAAM;"}