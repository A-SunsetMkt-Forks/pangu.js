{"version":3,"file":"cli.js","sources":["../../src/node/cli.ts"],"sourcesContent":["#!/usr/bin/env node\nimport pangu from '.';\n\nconst usage = `\nusage: pangu [-h] [-v] [-t] [-f] [-c] text_or_path\n\npangu.js -- Paranoid text spacing for good readability, to automatically\ninsert whitespace between CJK and half-width characters (alphabetical letters,\nnumerical digits and symbols).\n\npositional arguments:\n  text_or_path   the text or file path to apply spacing\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show program's version number and exit\n  -t, --text     specify the input value is a text\n  -f, --file     specify the input value is a file path\n  -c, --check    check if text has perfect spacing (exit 0 if yes, 1 if no)\n`.trim();\n\nconst [, , ...args] = process.argv;\n\nfunction printSpacingText(text: string | undefined) {\n  if (typeof text === 'string') {\n    console.log(pangu.spacingText(text));\n  } else {\n    console.log(usage);\n    process.exit(1);\n  }\n}\n\nfunction printSpacingFile(path: string | undefined) {\n  if (typeof path === 'string') {\n    console.log(pangu.spacingFileSync(path));\n  } else {\n    console.log(usage);\n    process.exit(1);\n  }\n}\n\nfunction checkSpacing(text: string | undefined) {\n  if (typeof text === 'string') {\n    const hasPerfectSpacing = pangu.hasPerfectSpacing(text);\n    if (!hasPerfectSpacing) {\n      // Optionally print the corrected version to stderr for debugging\n      console.error(`Corrected: ${pangu.spacingText(text)}`);\n    }\n    process.exit(hasPerfectSpacing ? 0 : 1);\n  } else {\n    console.log(usage);\n    process.exit(1);\n  }\n}\n\nif (args.length === 0) {\n  console.log(usage);\n} else {\n  switch (args[0]) {\n    case '-h':\n    case '--help':\n      console.log(usage);\n      break;\n    case '-v':\n    case '--version':\n      console.log(pangu.version);\n      break;\n    case '-t':\n    case '--text':\n      printSpacingText(args[1]);\n      break;\n    case '-f':\n    case '--file':\n      printSpacingFile(args[1]);\n      break;\n    case '-c':\n    case '--check':\n      checkSpacing(args[1]);\n      break;\n    default:\n      printSpacingText(args[0]);\n  }\n}\n\nprocess.exit(0);\n"],"names":[],"mappings":";;AAGA,MAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBZ,KAAK;AAEP,MAAM,KAAK,GAAG,IAAI,IAAI,QAAQ;AAE9B,SAAS,iBAAiB,MAA0B;AAC9C,MAAA,OAAO,SAAS,UAAU;AAC5B,YAAQ,IAAI,MAAM,YAAY,IAAI,CAAC;AAAA,EAAA,OAC9B;AACL,YAAQ,IAAI,KAAK;AACjB,YAAQ,KAAK,CAAC;AAAA,EAAA;AAElB;AAEA,SAAS,iBAAiB,MAA0B;AAC9C,MAAA,OAAO,SAAS,UAAU;AAC5B,YAAQ,IAAI,MAAM,gBAAgB,IAAI,CAAC;AAAA,EAAA,OAClC;AACL,YAAQ,IAAI,KAAK;AACjB,YAAQ,KAAK,CAAC;AAAA,EAAA;AAElB;AAEA,SAAS,aAAa,MAA0B;AAC1C,MAAA,OAAO,SAAS,UAAU;AACtB,UAAA,oBAAoB,MAAM,kBAAkB,IAAI;AACtD,QAAI,CAAC,mBAAmB;AAEtB,cAAQ,MAAM,cAAc,MAAM,YAAY,IAAI,CAAC,EAAE;AAAA,IAAA;AAE/C,YAAA,KAAK,oBAAoB,IAAI,CAAC;AAAA,EAAA,OACjC;AACL,YAAQ,IAAI,KAAK;AACjB,YAAQ,KAAK,CAAC;AAAA,EAAA;AAElB;AAEA,IAAI,KAAK,WAAW,GAAG;AACrB,UAAQ,IAAI,KAAK;AACnB,OAAO;AACG,UAAA,KAAK,CAAC,GAAG;AAAA,IACf,KAAK;AAAA,IACL,KAAK;AACH,cAAQ,IAAI,KAAK;AACjB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AACK,cAAA,IAAI,MAAM,OAAO;AACzB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AACc,uBAAA,KAAK,CAAC,CAAC;AACxB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AACc,uBAAA,KAAK,CAAC,CAAC;AACxB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AACU,mBAAA,KAAK,CAAC,CAAC;AACpB;AAAA,IACF;AACmB,uBAAA,KAAK,CAAC,CAAC;AAAA,EAAA;AAE9B;AAEA,QAAQ,KAAK,CAAC;"}